filter {
	
	if [type] == "events" {
		
		grok {
			
			    patterns_dir => ["/etc/logstash/patterns"]
			
                match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} urls src=%{IPV4:url_src}:%{INT:url_src_port} dst=%{IPV4:dst_ip}:%{INT:dst_port} mac=%{COMMONMAC:mac} agent=%{QS:agent} request: %{WORD:request_type} %{URL}" }
               
                match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{WORD:action} url='%{URL} category0='%{GREEDYDATA:uri_type}' server='%{IPV4:server_ip}:%{INT:server_port}'" }
			
			    match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{WORD:action} url='%{URL} category0='%{GREEDYDATA:uri_type}'" }
			
			    match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:protocol} of ip %{IPV4:client_ip} from %{WORD:client} mac %{COMMONMAC:server_mac} for client mac %{COMMONMAC:client_mac} from router %{IPV4:router} on subnet %{IPV4:subnet} with dns %{IPV4:dns1}, %{IPV4:dns2}" }
			    
			    match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:protocol} of ip %{IPV4:client_ip} from %{WORD:client} mac %{COMMONMAC:server_mac} for client mac %{COMMONMAC:client_mac} from router %{IPV4:router} on subnet %{IPV4:subnet} with dns %{IPV4:dns1}" }
			
			    match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} %{WORD:kind} %{GREEDYDATA:vpn}: %{GREEDYDATA:vpn_error}." }			
			
			   match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' client_ip='%{IPV4:client_ip}' aid='%{INT:aid}'" }
			   
			   match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' aid='%{INT:aid}'" }
			
			   match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' reason='%{INT:reason}' instigator='%{INT:instigator}' duration='%{BASE10NUM:duration}' auth_neg_failed='%{INT:auth_neg_failed}' is_wpa='%{INT:is_wpa}' aid='%{INT:aid}'" }
			
			   match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPV4:src_ip} %{INT:bytes} %{BASE10NUM:epoch_time} %{WORD:firewall} events type=%{WORD:events_type} radio='%{INT:radio}' vap='%{INT:vap}' client_mac='%{COMMONMAC:client_mac}' client_ip='%{IPV4:client_ip}' channel='%{INT:channel}' rssi='%{INT:rssi}' aid='%{INT:aid}'" }
			   
			
		}
		
					   geoip {
                               source => "src_ip"
                               target => "geoip_src_events"
                               database => "/etc/logstash/GeoLiteCity.dat"
                               add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                               add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                             }
                             
                       geoip {
                               source => "dst_ip"
                               target => "geoip_dst_events"
                               database => "/etc/logstash/GeoLiteCity.dat"
                               add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                               add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                             } 
                             
                             
                       geoip {
                               source => "url_ip"
                               target => "geoip_url_events"
                               database => "/etc/logstash/GeoLiteCity.dat"
                               add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                               add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                             }           
              
                       mutate {
                          convert => [ "[geoip][coordinates]", "float"]
                              }
		
	}
	
}